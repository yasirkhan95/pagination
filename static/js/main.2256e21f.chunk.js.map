{"version":3,"sources":["Components/Result/Result.js","Actions/index.js","Constants/index.js","Components/App.js","Reducer/index.js","index.js"],"names":["Result","state","currentPage","itemPerPage","this","props","FetchDataFromApi","totalPage","lastPage","newArr","data","slice","numberofPages","i","Math","ceil","length","push","className","map","item","src","id","alt","title","substr","body","page","key","onClick","e","setState","target","Component","connect","Fetch","a","async","axios","get","res","type","payload","App","initState","middleware","thunk","logger","store","createStore","action","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"mSAKMA,G,iNAEFC,MAAQ,CACRC,YAAY,EACZC,YAAY,G,mFAIZC,KAAKC,MAAMC,qB,+BAUX,IAPQ,IAAD,OACDC,EAAYH,KAAKH,MAAMC,YAAcE,KAAKH,MAAME,YAChDK,EAAUD,EAAYH,KAAKH,MAAME,YACjCM,EAASL,KAAKC,MAAMK,KAAKC,MAAMH,EAASD,GAGxCK,EAAgB,GACdC,EAAG,EAAGA,GAAKC,KAAKC,KAAKX,KAAKC,MAAMK,KAAKM,OAASZ,KAAKH,MAAME,aAAaU,IAC5ED,EAAcK,KAAKJ,GAGjB,OACI,yBAAKK,UAAU,aACX,yBAAKA,UAAU,QACVT,EAAOU,KAAI,SAACC,GACT,OACI,yBAAKF,UAAU,WACX,yBAAKG,IAAG,+BAA0BD,EAAKE,GAA/B,iBAAkDC,IAAI,KAC9D,wBAAIL,UAAU,QAAQE,EAAKI,MAAMC,OAAO,EAAE,KAC1C,2BAAIL,EAAKM,KAAKD,OAAO,EAAE,WAKvC,yBAAKP,UAAU,oBAEX,4BAEIN,EAAcO,KAAI,SAACQ,EAAKd,GACxB,OAAO,wBAAIe,IAAKf,EAAGS,GAAIK,EACvBE,QAAS,SAACC,GAAD,OAAK,EAAKC,SAAS,CAAC7B,YAAY4B,EAAEE,OAAOV,OAEhDK,a,GA3CLM,cA4DNC,eANO,SAACjC,GACnB,MAAM,CACFS,KAAMT,EAAMS,QAImB,CAACJ,iBC9DT,WAC3B,OAAO,SAAO6B,GAAP,iBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACeE,IAAMC,IAAI,+CADzB,cACG7B,EADH,kBAAA0B,EAAA,MAEe1B,EAAKA,MAFpB,OAEG8B,EAFH,OAIHL,EAAM,CACFM,KCTQ,ODURC,QAASF,IANV,wCD6DIN,CAA6ClC,GGrD7C2C,EATH,WACR,OACI,6BACI,wBAAIzB,UAAU,oBAAd,aACA,kBAAC,EAAD,Q,wCCLN0B,EAAU,CACZlC,KAAK,ICOHmC,EAAa,CAACC,IAAMC,KACpBC,EAAQC,aDLQ,WAA2B,IAA1BhD,EAAyB,uDAAnB2C,EAAUM,EAAS,uCAC5C,OAAQA,EAAOT,MACX,IFRY,OEUR,MAAM,CACF/B,KAAKwC,EAAOR,SAGpB,QACI,sBACOzC,MCLekD,IAAe,WAAf,EAAmBN,IACrDO,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,OAEPM,SAASC,eAAe,W","file":"static/js/main.2256e21f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {FetchDataFromApi} from '../../Actions/index';\r\nimport './Result.css'\r\n\r\nclass Result extends Component {\r\n\r\n    state = {\r\n    currentPage:1,\r\n    itemPerPage:8\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.props.FetchDataFromApi();\r\n  }\r\n\r\n  render() {\r\n    const totalPage = this.state.currentPage * this.state.itemPerPage;\r\n    const lastPage =totalPage - this.state.itemPerPage;\r\n    const newArr = this.props.data.slice(lastPage,totalPage);\r\n\r\n\r\n    const numberofPages = [];\r\n    for(var i =1; i <= Math.ceil(this.props.data.length / this.state.itemPerPage);i++){\r\n      numberofPages.push(i)\r\n    }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"main\">\r\n                    {newArr.map((item)=>{\r\n                        return (\r\n                            <div className=\" div-25\">\r\n                                <img src={`https://robohash.org/${item.id}?size=120x120`} alt=\"\"/>\r\n                                <h4 className=\"mt-3\">{item.title.substr(0,10)}</h4>\r\n                                <p>{item.body.substr(0,100)}</p>\r\n                            </div>\r\n                            )\r\n                        })}\r\n                </div>\r\n                <div className=\"text-center pt-4\">\r\n                   {\r\n                    <ul>\r\n                        {\r\n                        numberofPages.map((page,i)=>{\r\n                        return <li key={i} id={page}\r\n                        onClick={(e)=>this.setState({currentPage:e.target.id})}\r\n\r\n                        >{page}</li>\r\n                        })\r\n                        }\r\n                    </ul>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return{\r\n        data: state.data\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,{FetchDataFromApi}) (Result);","import * as type from '../Constants/index';\r\nimport axios from 'axios';\r\n\r\nexport const FetchDataFromApi =()=>{\r\n    return async (Fetch) =>{\r\n        const data =await axios.get(\"https://jsonplaceholder.typicode.com/posts\");\r\n        const res = await data.data\r\n\r\n        Fetch({\r\n            type: type.DATA,\r\n            payload: res\r\n        })\r\n    }\r\n}\r\n\r\n// const Loading = () => {\r\n//     return {\r\n//         type: type.LOADING_DATA\r\n//     }\r\n// }\r\n\r\n// const Error_Load = () =>{\r\n//     return{\r\n//         type: type.ERROR_LOAD ,\r\n//         payload : err\r\n//     }\r\n// }\r\n\r\n// const Loaded = () =>{\r\n//     return {\r\n        \r\n//     }\r\n// }\r\n\r\n// export const SuccussFullyLoadData = () => {\r\n//     return dispatch => {\r\n//         dispatch(Loading());\r\n//         axios.get('https://jsonplaceholder.typicode.com/posts')\r\n//         .then(res=> {\r\n//             dispatch (Loaded())\r\n//         })\r\n//     }\r\n// }","export const DATA = 'DATA';\r\nexport const LOADING_DATA = 'LOADING_DATA';\r\nexport const ERROR_LOAD = 'ERROR_LOAD';\r\n","import React from 'react';\r\nimport Result from './Result/Result'\r\n\r\nconst App = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"text-center pb-4\">All Posts</h1>\r\n            <Result/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import * as type from \"../Constants/index\";\r\n\r\nconst initState={\r\n    data:[]\r\n}\r\n\r\nexport const Reducer =(state=initState,action)=>{\r\n    switch (action.type) {\r\n        case type.DATA:\r\n            \r\n            return{\r\n                data:action.payload\r\n            }\r\n    \r\n        default:\r\n            return{\r\n                ...state,\r\n            }\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './Components/App';\r\nimport {createStore,applyMiddleware} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport {Reducer} from './Reducer/index'\r\n\r\n\r\nconst middleware = [thunk,logger]\r\nconst store = createStore(Reducer,applyMiddleware(...middleware));\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n,document.getElementById('root'))"],"sourceRoot":""}